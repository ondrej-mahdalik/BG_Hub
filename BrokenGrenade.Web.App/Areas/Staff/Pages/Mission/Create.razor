@page "/Staff/Mission/Create"
@using BrokenGrenade.Common.Permissions
@using BrokenGrenade.Common.Models
@using BrokenGrenade.Web.BL.Facades
@using BrokenGrenade.Web.App.Extensions
@inject MissionFacade MissionFacade
@inject MissionTypeFacade MissionTypeFacade
@inject ModpackTypeFacade ModpackTypeFacade
@inject UserFacade UserFacade
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IToastService ToastService
@attribute [Authorize(Policy = PolicyTypes.CreateMissions)]

<PageTitle>Nová mise — BG Hub</PageTitle>

<div class="pt-3 pb-2 mb-3">
    <h1 class="h2">Nová mise</h1>
</div>
<div class="card bg-dark-subtle mb-4">
    <div class="card-body">
        <div class="row">
            <div class="col">
                <EditForm EditContext="@_editContext" OnValidSubmit="@CreateMissionAsync">
                    <div class="row text-danger">
                        <div class="col">
                            <DataAnnotationsValidator/>
                            <ValidationSummary/>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-12 col-sm-6">
                            <div class="mb-3">
                                <label class="form-label">Název mise</label>
                                <InputText class="form-control" @bind-Value="_mission.Name"/>
                            </div>
                        </div>
                        <div class="col-12 col-sm-6">
                            <div class="mb-3">
                                <label class="form-label">Datum</label>
                                <InputDate class="form-control" Type="InputDateType.DateTimeLocal" @bind-Value="_mission.MissionStartDate"/>
                            </div>
                            @if (_missionConflict)
                            {
                                <div class="mb-3 alert alert-warning">
                                    <h6 class="alert-heading">Možný konflikt</h6>
                                    <p class="mb-0  ">V tento den je již nějaká mise vyhozena. Ujisti se, že jsi zadal správné datum, případně, že máš od PL povoleno vyhodit druhou misi v jeden den.</p>
                                </div>
                            }
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-12 col-sm-6">
                            <div class="mb-3">
                                <label class="form-label">Druh mise</label>
                                <InputSelect class="form-select" TValue="Guid?" @bind-Value="_mission.MissionTypeId">
                                    @foreach (var type in _missionTypes)
                                    {
                                        <option value="@type.Id">@type.Name</option>
                                    }
                                </InputSelect>
                            </div>
                        </div>
                        <div class="col-12 col-sm-6">
                            <div class="mb-3">
                                <label class="form-label">Typ modpacku</label>
                                <InputSelect class="form-select" TValue="Guid?" @bind-Value="_mission.ModpackTypeId">
                                    @foreach (var type in _modpackTypes)
                                    {
                                        <option value="@type.Id">@type.Name</option>
                                    }
                                    <option value="">Ostatní</option>
                                </InputSelect>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <div class="mb-3">
                                <label class="form-label">Odkaz na slotování</label>
                                <InputText class="form-control" @bind-Value="_mission.SlottingSheetUrl"/>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <div class="mb-3">
                                <label class="form-label">Vlastní modpack</label>
                                <SfUploader AutoUpload="false" AllowedExtensions=".html">
                                    <UploaderEvents ValueChange="OnFileChanged" OnRemove="OnFileRemoved"></UploaderEvents>
                                </SfUploader>
                            </div>
                        </div>
                    </div>
                    @if (_currentUser?.Roles.Any(x => x.ManageMissions) ?? false)
                    {
                        <div class="row">
                            <div class="col">
                                <div class="mb-3">
                                    <label class="form-label" for="creator">Autor</label>
                                    <SfDropDownList id="creator"
                                                    TItem="UserModel"
                                                    TValue="Guid?"
                                                    DataSource="_users"
                                                    @bind-Value="_mission.CreatorId"
                                                    AllowFiltering="true"
                                                    CssClass="form-control">
                                        <DropDownListFieldSettings Value="@nameof(UserModel.Id)" Text="@nameof(UserModel.Nickname)"></DropDownListFieldSettings>
                                    </SfDropDownList>
                                </div>
                            </div>
                        </div>
                    }
                    <div class="row">
                        <div class="col">
                            <button type="submit" class="btn btn-primary">Vytvořit misi</button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {

    private MissionModel _mission = new();
    private EditContext? _editContext;
    private bool _missionConflict;
    
    private List<UserModel>? _users;
    private UserModel? _currentUser;

    private List<MissionTypeModel> _missionTypes = new();
    private List<ModpackTypeModel> _modpackTypes = new();

    protected override async Task OnInitializedAsync()
    {
        _editContext = new EditContext(_mission);
        _editContext.OnFieldChanged += async (_, args) => await CheckForMissionConflicts(args);

        try
        {
            _missionTypes = await MissionTypeFacade.GetAsync();
            _modpackTypes = await ModpackTypeFacade.GetAsync();
        }
        catch (Exception e)
        {
            ToastService.ShowError(e.Message);
        }

        _mission.MissionStartDate = DateTime.Today.AddHours(19);
        _mission.MissionTypeId = _missionTypes.FirstOrDefault()?.Id;
        _mission.ModpackTypeId = _modpackTypes.FirstOrDefault()?.Id;
        await CheckForMissionConflicts();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _currentUser = await UserFacade.GetAsync(authState.GetUserId().GetValueOrDefault());
        _mission.CreatorId = _currentUser?.Id;
        
        if (_currentUser?.Roles.Any(x => x.ManageMissions) ?? false)
        {
            try
            {
                _users = await UserFacade.GetAsync();
            }
            catch (Exception e)
            {
                ToastService.ShowError(e.Message);
            }
        }
        
    }
    private async Task CheckForMissionConflicts(FieldChangedEventArgs? e = null)
    {
        if (e is not null && e.FieldIdentifier.FieldName != nameof(_mission.MissionStartDate))
            return;

        try
        {
            _missionConflict = await MissionFacade.IsMissionOn(_mission.MissionStartDate);
        }
        catch (Exception exception)
        {
            ToastService.ShowError(exception.Message);
        }
    }

    private async Task CreateMissionAsync()
    {
        try
        {
            await MissionFacade.SaveAsync(_mission);
        }
        catch (Exception e)
        {
            ToastService.ShowError(e.Message);
        }

        NavigationManager.NavigateTo($"/Mission/{_mission.Id}");
        ToastService.ShowSuccess("Mise byla úspěšně vytvořena.");
    }
    private void OnFileChanged(UploadChangeEventArgs args)
    {
        var file = args.Files.FirstOrDefault();
        if (file is null)
            return;
            
        var path = Path.Combine("wwwroot/files/", file.FileInfo.Name);
        FileStream filestream = new FileStream(path, FileMode.Create, FileAccess.Write);
        file.Stream.WriteTo(filestream);
        filestream.Close();
        file.Stream.Close();
        
        _mission.ModpackUrl = "/files/" + file.FileInfo.Name;
    }
    private void OnFileRemoved(RemovingEventArgs args)
    {
        var removeFile = args.FilesData.FirstOrDefault();
        if (removeFile?.Name != null && File.Exists(Path.Combine(@"wwwroot/files/", removeFile.Name)))
        {
            File.Delete(Path.Combine(@"wwwroot/files/", removeFile.Name));
        }

        _mission.ModpackUrl = null;
    }
}