@page "/Staff/Mission/Edit/{Id:guid}"
@using BrokenGrenade.Web.App.Extensions
@using BrokenGrenade.Web.BL.Facades
@using BrokenGrenade.Common.Models
@using BrokenGrenade.Web.App.Shared.Modals

@inject MissionFacade MissionFacade
@inject MissionTypeFacade MissionTypeFacade
@inject ModpackTypeFacade ModpackTypeFacade
@inject UserFacade UserFacade
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IToastService ToastService

<PageTitle>Upravit misi — BG Hub</PageTitle>

<div class="pt-3 pb-2 mb-3">
    <div class="btn-toolbar mb-2 mb-md-0">
        <div class="btn-group me-2">
            <a class="btn btn-sm btn-link text-decoration-none" href="/Mission">
                <i class="fa-solid fa-angles-left"></i> Zpět na všechny mise
            </a>
            @if (_mission is not null)
            {
                <button class="btn btn-sm btn-link link-danger text-decoration-none" @onclick="DeleteMissionAsync">
                    <i class="fa-solid fa-remove"></i> Odstranit misi
                </button>
            }
        </div>
    </div>
    <h1 class="h2">Upravit misi</h1>
</div>
<div class="card bg-dark-subtle mb-4">
    <div class="card-body">
        <div class="row">
            <div class="col">
                @if (_mission is null)
                {
                    <p class="text-center fw-bold">Načítání...</p>
                }
                else
                {
                    <EditForm EditContext="@_editContext" OnValidSubmit="@EditMissionAsync">
                        <div class="row text-danger">
                            <div class="col">
                                <DataAnnotationsValidator/>
                                <ValidationSummary/>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-12 col-sm-6">
                                <div class="mb-3">
                                    <label class="form-label">Název mise</label>
                                    <InputText class="form-control" @bind-Value="_mission.Name"/>
                                </div>
                            </div>
                            <div class="col-12 col-sm-6">
                                <div class="mb-3">
                                    <label class="form-label">Datum</label>
                                    <InputDate class="form-control" Type="InputDateType.DateTimeLocal" @bind-Value="_mission.MissionStartDate"/>
                                </div>
                                @if (_missionConflict)
                                {
                                    <div class="mb-3 alert alert-warning">
                                        <h6 class="alert-heading">Možný konflikt</h6>
                                        <p class="mb-0">V tento den je již nějaká mise vyhozena. Ujisti se, že jsi zadal správné datum, případně, že máš od PL povoleno vyhodit druhou misi v jeden den.</p>
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-12 col-sm-6">
                                <div class="mb-3">
                                    <label class="form-label">Druh mise</label>
                                    <InputSelect class="form-select" TValue="Guid?" @bind-Value="_mission.MissionTypeId">
                                        @foreach (var type in _missionTypes)
                                        {
                                            <option value="@type.Id">@type.Name</option>
                                        }
                                    </InputSelect>
                                </div>
                            </div>
                            <div class="col-12 col-sm-6">
                                <div class="mb-3">
                                    <label class="form-label">Typ modpacku</label>
                                    <InputSelect class="form-select" TValue="Guid?" @bind-Value="_mission.ModpackTypeId">
                                        @foreach (var type in _modpackTypes)
                                        {
                                            <option value="@type.Id">@type.Name</option>
                                        }
                                        <option value="">Ostatní</option>
                                    </InputSelect>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <div class="mb-3">
                                    <label class="form-label">Odkaz na slotování</label>
                                    <InputText class="form-control" @bind-Value="_mission.SlottingSheetUrl"/>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <div class="mb-3">
                                    <label class="form-label">Vlastní modpack</label>
                                    <FileUploadComponent MaxFileSize="@(3 * 1024 * 1024)"
                                                         Id="modpackFile"
                                                         AllowedExtensions=".html"
                                                         @bind-Value="_mission.ModpackUrl"/>
                                </div>
                            </div>
                        </div>
                        @if (_currentUser?.Roles.Any(x => x.ManageMissions) ?? false)
                        {
                            <div class="row">
                                <div class="col">
                                    <div class="mb-3">
                                        <label class="form-label" for="creator">Autor</label>
                                        <SfDropDownList id="creator"
                                                        TItem="UserModel"
                                                        TValue="Guid?"
                                                        DataSource="_users"
                                                        @bind-Value="_mission.CreatorId"
                                                        AllowFiltering="true"
                                                        CssClass="form-control">
                                            <DropDownListFieldSettings Value="@nameof(UserModel.Id)" Text="@nameof(UserModel.Nickname)"></DropDownListFieldSettings>
                                        </SfDropDownList>
                                    </div>
                                </div>
                            </div>
                        }
                        <div class="row">
                            <div class="col-12 col-sm-6">
                                <div class="mb-3">
                                    <button type="submit" class="btn btn-primary">Uložit změny</button>
                                </div>
                            </div>
                        </div>
                    </EditForm>
                }
            </div>
        </div>
    </div>
</div>

@code {
    
    [Parameter]
    public Guid Id { get; set; }
    
    [CascadingParameter]
    public IModalService Modal { get; set; } = default!;

    private MissionModel? _mission;
    private EditContext? _editContext;
    private bool _missionConflict;
    
    private UserModel? _currentUser;
    private List<UserModel>? _users;

    private List<MissionTypeModel> _missionTypes = new();
    private List<ModpackTypeModel> _modpackTypes = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _mission = await MissionFacade.GetAsync(Id);
            if (_mission is null)
                throw new Exception("Při načítání mise došlo k chybě.");
            
            _missionTypes = await MissionTypeFacade.GetAsync();
            _modpackTypes = await ModpackTypeFacade.GetAsync();
        }
        catch (Exception e)
        {
            NavigationManager.NavigateTo("/Mission");
            ToastService.ShowError(e.Message);
            return;
        }

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _currentUser = await UserFacade.GetAsync(authState.GetUserId().GetValueOrDefault());

        if (_currentUser?.Roles.Any(x => x.ManageMissions) ?? false)
        {
            try
            {
                _users = await UserFacade.GetAsync();
            }
            catch (Exception e)
            {
                ToastService.ShowError(e.Message);
            }
        }

        if (_mission.CreatorId != _currentUser?.Id && (!_currentUser?.Roles.Any(x => x.ManageMissions) ?? false))
        {
            NavigationManager.NavigateTo("/Mission");
            ToastService.ShowError("Nemáš oprávnění upravovat tuto misi.");
            return;
        }
        
        _editContext = new EditContext(_mission);
        _editContext.OnFieldChanged += async (_, args) => await CheckForMissionConflicts(args);
    }
    private async Task CheckForMissionConflicts(FieldChangedEventArgs? args = null)
    {
        if (args is not null && args.FieldIdentifier.FieldName != nameof(_mission.MissionStartDate) || _mission?.MissionStartDate is null)
            return;

        try
        {
            _missionConflict = await MissionFacade.IsMissionOn(_mission.MissionStartDate);
        }
        catch (Exception e)
        {
            ToastService.ShowError(e.Message);
        }
    }

    private async Task EditMissionAsync()
    {
        if (_mission is null)
            return;

        try
        {
            await MissionFacade.SaveAsync(_mission);
        }
        catch (Exception e)
        {
            ToastService.ShowError(e.Message);
            return;
        }
        
        NavigationManager.NavigateTo($"/Mission/{_mission.Id}");
        ToastService.ShowSuccess("Mise byla úspěšně upravena.");
    }

    private async Task DeleteMissionAsync()
    {
        if (_mission is null)
            return;
        
        var parameters = new ModalParameters()
            .Add(nameof(DeleteConfirmationModal.Title), "Opravdu chcete odstranit tuto misi?")
            .Add(nameof(DeleteConfirmationModal.DangerText), "Tato operace je nevratná.");
        
        var modalResult = await Modal.Show<DeleteConfirmationModal>("Opravdu chcete odstranit tuto misi?", parameters, ModalPresets.CustomLayout).Result;
        if (!modalResult.Confirmed)
            return;

        try
        {
            await MissionFacade.DeleteAsync(_mission);
        }
        catch (Exception e)
        {
            ToastService.ShowError(e.Message);
            return;
        }
        
        NavigationManager.NavigateTo("/Mission");
        ToastService.ShowSuccess("Mise byla úspěšně odstraněna.");
    }
}