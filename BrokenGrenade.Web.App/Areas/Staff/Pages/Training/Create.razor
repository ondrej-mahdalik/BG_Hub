@page "/Staff/Training/Create"
@using BrokenGrenade.Common.Permissions
@using BrokenGrenade.Common.Models
@using BrokenGrenade.Web.App.Extensions
@using BrokenGrenade.Web.BL.Facades
@using BrokenGrenade.Common.Enums
@inject UserFacade UserFacade
@inject TrainingFacade TrainingFacade
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IToastService ToastService
@attribute [Authorize(Policy = PolicyTypes.CreateTrainings)]

<PageTitle>Nový výcvik — BG Hub</PageTitle>

<div class="pt-3 pb-2 mb-3">
    <h1 class="h2">Nový výcvik</h1>
</div>
<div class="card bg-dark-subtle mb-4">
    <div class="card-body">
        <EditForm Model="@_training" OnValidSubmit="@CreateTrainingAsync">
            <div class="row text-danger">
                <div class="col">
                    <DataAnnotationsValidator/>
                    <ValidationSummary/>
                </div>
            </div>
            <div class="row">
                <div class="col-12 col-sm-6">
                    <div class="mb-3">
                        <label class="form-label">Název výcviku</label>
                        <InputText class="form-control" @bind-Value="_training.Name"/>
                    </div>
                </div>
                <div class="col12 col-sm-6">
                    <div class="mb-3">
                        <label class="form-label">Datum</label>
                        <InputDate class="form-control" Type="InputDateType.DateTimeLocal" @bind-Value="_training.Date"/>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <div class="mb-3">
                        <label class="form-label">Poznámka</label>
                        <SfRichTextEditor @bind-Value="_training.Note" Placeholder="Bez poznámky"></SfRichTextEditor>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <div class="mb-3">
                        <label class="form-label">Zmínka</label>
                        <select class="form-control" @bind="_mentionType">
                            <option value="@TrainingMentionType.None" selected>Bez zmínky</option>
                            <option value="@TrainingMentionType.Newbies">Zmínit nováčky</option>
                            <option value="@TrainingMentionType.Subscribers">Zmínit odběratele</option>
                        </select>
                    </div>
                </div>
            </div>
            @if (_currentUser?.Roles.Any(x => x.ManageTrainings) ?? false)
            {
                <div class="row">
                    <div class="col">
                        <div class="mb-3">
                            <label class="form-label" for="creator">Autor</label>
                            <SfDropDownList id="creator"
                                            TItem="UserModel"
                                            TValue="Guid?"
                                            DataSource="_users"
                                            @bind-Value="_training.CreatorId"
                                            AllowFiltering="true"
                                            CssClass="form-control">
                                <DropDownListFieldSettings Value="@nameof(UserModel.Id)" Text="@nameof(UserModel.Nickname)"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </div>
                    </div>
                </div>
            }
            <div class="row">
                <div class="col">
                    <div class="mb-3">
                        <button type="submit" class="btn btn-primary">Vytvořit výcvik</button>
                    </div>
                </div>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private TrainingModel _training = new();
    private UserModel? _currentUser;
    private List<UserModel>? _users;
    
    private TrainingMentionType _mentionType = TrainingMentionType.None;
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _currentUser = await UserFacade.GetAsync(authState.GetUserId().GetValueOrDefault());
        _training.CreatorId = _currentUser?.Id;

        if (_currentUser?.Roles.Any(x => x.ManageTrainings) ?? false)
        {
            try
            {
                _users = await UserFacade.GetAsync();
            }
            catch (Exception e)
            {
                ToastService.ShowError(e.Message);
            }
        }
    }

    private async Task CreateTrainingAsync()
    {
        if (_training.Note?.Length == 0)
            _training.Note = null;
        
        try
        {
            await TrainingFacade.SaveAsync(_training, _mentionType);
        }
        catch (Exception e)
        {
            ToastService.ShowError(e.Message);
            return;
        }

        NavigationManager.NavigateTo($"/Training/{_training.Id}");
        ToastService.ShowSuccess("Výcvik byl úspěšně vytvořen.x");
    }
}