@page "/Staff/Training/Edit/{Id:guid}"
@using BrokenGrenade.Web.App.Extensions
@using BrokenGrenade.Common.Models
@using BrokenGrenade.Web.App.Shared.Modals
@using BrokenGrenade.Web.BL.Facades
@inject TrainingFacade TrainingFacade
@inject UserFacade UserFacade
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IToastService ToastService

<PageTitle>Upravit výcvik — BG Hub</PageTitle>

<div class="pt-3 pb-2 mb-3">
    <div class="btn-toolbar mb-2 mb-md-0">
        <div class="btn-group me-2">
            <a class="btn btn-sm btn-link text-decoration-none" href="/Training">
                <i class="fa-solid fa-angles-left"></i> Zpět na všechny výcviky
            </a>
            <button class="btn btn-sm btn-link text-danger text-decoration-none" @onclick="DeleteTrainingAsync">
                <i class="fa-solid fa-trash-can"></i> Odstranit
            </button>
        </div>
    </div>
    <h1 class="h2">Upravit výcvik</h1>
</div>
<div class="card bg-dark-subtle mb-4">
    <div class="card-body">
        <div class="row">
            <div class="col">
                @if (_training is not null)
                {
                    <EditForm Model="@_training" OnValidSubmit="@EditTrainingAsync">
                        <div class="row text-danger">
                            <div class="col">
                                <DataAnnotationsValidator/>
                                <ValidationSummary/>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-12 col-sm-6">
                                <div class="mb-3">
                                    <label class="form-label">Název výcviku</label>
                                    <InputText class="form-control" @bind-Value="_training.Name"/>
                                </div>
                            </div>
                            <div class="col12 col-sm-6">
                                <div class="mb-3">
                                    <label class="form-label">Datum</label>
                                    <InputDate class="form-control" Type="InputDateType.DateTimeLocal" @bind-Value="_training.Date"/>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <div class="mb-3">
                                    <label>Poznámka</label>
                                    <InputTextArea class="form-control" @bind-Value="_training.Note"/>
                                </div>
                            </div>
                        </div>
                        @if (_currentUser?.Roles.Any(x => x.ManageMissions) ?? false)
                        {
                            <div class="row">
                                <div class="col">
                                    <div class="mb-3">
                                        <label class="form-label" for="creator">Autor</label>
                                        <SfDropDownList id="creator"
                                                        TItem="UserModel"
                                                        TValue="Guid?"
                                                        DataSource="@_users"
                                                        @bind-Value="_training.CreatorId"
                                                        AllowFiltering="true"
                                                        CssClass="form-control">
                                            <DropDownListFieldSettings Value="@nameof(UserModel.Id)" Text="@nameof(UserModel.Nickname)"></DropDownListFieldSettings>
                                        </SfDropDownList>
                                    </div>
                                </div>
                            </div>
                        }
                        <div class="row">
                            <div class="col">
                                <button type="submit" class="btn btn-primary">Upravit výcvik</button>
                            </div>
                        </div>
                    </EditForm>
                }
                else
                {
                    <div class="row">
                        <div class="col-12 col-sm-6">
                            <div class="mb-3">
                                <label class="form-label">Název výcviku</label>
                                <p class="form-control placeholder-glow" aria-hidden="true">
                                    <span class="placeholder w-100"></span>
                                </p>
                            </div>
                        </div>
                        <div class="col12 col-sm-6">
                            <div class="mb-3">
                                <label class="form-label">Datum</label>
                                <p class="form-control placeholder-glow" aria-hidden="true">
                                    <span class="placeholder w-100"></span>
                                </p>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <div class="mb-3">
                                <label>Poznámka</label>
                                <p class="form-control placeholder-glow" aria-hidden="true">
                                    <span class="placeholder w-100"></span>
                                </p>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <a class="btn btn-primary disabled placeholder col-4"></a>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Guid Id { get; set; }
    
    [CascadingParameter]
    public IModalService Modal { get; set; } = default!;

    private TrainingModel? _training;
    private UserModel? _currentUser;
    private List<UserModel>? _users;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _training = await TrainingFacade.GetAsync(Id);
            if (_training is null)
                throw new Exception("Při načítání výcviku došlo k chybě.");
        }
        catch (Exception e)
        {
            NavigationManager.NavigateTo("/Training");
            ToastService.ShowError(e.Message);
            return;
        }

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _currentUser = await UserFacade.GetAsync(authState.GetUserId().GetValueOrDefault());

        if (_currentUser?.Roles.Any(x => x.ManageTrainings) ?? false)
        {
            try
            {
                _users = await UserFacade.GetAsync();
            }
            catch (Exception e)
            {
                ToastService.ShowError(e.Message);
            }
        }

        if (_training.CreatorId != _currentUser?.Id && (!_currentUser?.Roles.Any(x => x.ManageTrainings) ?? false))
        {
            NavigationManager.NavigateTo("/");
            ToastService.ShowError("Nemáte oprávnění upravovat tento výcvik.");
        }
    }

    private async Task EditTrainingAsync()
    {
        if (_training is null)
            return;

        try
        {
            await TrainingFacade.SaveAsync(_training);
        }
        catch (Exception e)
        {
            ToastService.ShowError(e.Message);
            return;
        }
        
        NavigationManager.NavigateTo($"/Training/{_training.Id}");
        ToastService.ShowSuccess("Výcvik byl úspěšně upraven.");
    }

    private async Task DeleteTrainingAsync()
    {
        if (_training is null)
            return;

        var parameters = new ModalParameters()
            .Add(nameof(DeleteConfirmationModal.Title), "Opravdu chcete odstranit tento výcvik?")
            .Add(nameof(DeleteConfirmationModal.DangerText), "Tato operace je nevratná.");

        var modalResult = await Modal.Show<DeleteConfirmationModal>(string.Empty, parameters, ModalPresets.CustomLayout).Result;
        if (!modalResult.Confirmed)
            return;

        try
        {
            await TrainingFacade.DeleteAsync(_training);
        }
        catch (Exception e)
        {
            ToastService.ShowError(e.Message);
            return;
        }
        NavigationManager.NavigateTo("/Training");
        ToastService.ShowSuccess("Výcvik byl úspěšně odstraněn.");
    }
}