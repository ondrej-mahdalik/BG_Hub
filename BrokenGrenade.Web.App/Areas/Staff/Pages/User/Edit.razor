@page "/Staff/User/Edit/{Id:guid}"
@using BrokenGrenade.Common.Permissions
@using BrokenGrenade.Common.Models
@using BrokenGrenade.Web.BL.Facades
@inject UserFacade UserFacade
@inject RoleFacade RoleFacade
@inject NavigationManager NavigationManager
@attribute [Authorize(Policy = PolicyTypes.ManageUsers)]

<PageTitle>Upravit uživatele — BG Hub</PageTitle>

<div class="pt-3 pb-2 mb-3">
    <div class="btn-toolbar mb-2 mb-md-0">
        <div class="btn-group me-2">
            <a class="btn btn-sm btn-link text-decoration-none" href="/Staff/User">
                <i class="fa-solid fa-angles-left"></i> Zpět na všechny uživatele
            </a>
            @if (_user is not null)
            {
                <button class="btn btn-sm btn-link link-warning text-decoration-none">
                    <i class="fa-solid fa-key"></i> Obnovit heslo
                </button>
                <button class="btn btn-sm btn-link link-danger text-decoration-none">
                    <i class="fa-solid fa-remove"></i> Odstranit uživatele
                </button>
            }
        </div>
    </div>
    <h1 class="h2">Upravit uživatele</h1>
</div>
<div class="card bg-dark-subtle mb-4">
    <div class="card-body">
        @if (_user is null)
        {
            <div class="row">
                <div class="col-12 col-sm-6">
                    <div class="mb-3">
                        <label class="form-label" for="nickname">Přezdívka</label>
                        <p class="form-control placeholder-glow" aria-hidden="true">
                            <span class="placeholder w-100"></span>
                        </p>
                    </div>
                </div>
                <div class="col-12 col-sm-6">
                    <div class="mb-3">
                        <label class="form-label" for="email">Email</label>
                        <p class="form-control placeholder-glow" aria-hidden="true">
                            <span class="placeholder w-100"></span>
                        </p>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-12 col-sm-6">
                    <div class="mb-3">
                        <label class="form-label">Role</label>
                        <p class="form-control placeholder-glow" aria-hidden="true">
                            <span class="placeholder w-100"></span>
                        </p>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <a class="btn btn-primary disabled placeholder col-4"></a>
                </div>
            </div>
        }
        else
        {
            <EditForm Model="_user" OnValidSubmit="EditUserAsync">
                <div class="row text-danger">
                    <div class="col">
                        <DataAnnotationsValidator/>
                        <ValidationSummary/>
                    </div>
                </div>
                <div class="row">
                    <div class="col-12 col-sm-6">
                        <div class="mb-3">
                            <label class="form-label" for="nickname">Přezdívka</label>
                            <InputText class="form-control" id="nickname" @bind-Value="                                _user.Nickname"></InputText>
                        </div>
                    </div>
                    <div class="col-12 col-sm-6">
                        <div class="mb-3">
                            <label class="form-label" for="email">Email</label>
                            <InputText class="form-control" id="email" @bind-Value="                                _user.Email"></InputText>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-12 col-sm-6">
                        <div class="mb-3">
                            <label class="form-label">Role</label>
                            @if (_roles is null)
                            {
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Načítání...</span>
                                </div>
                            }
                            else
                            {
                                <SfMultiSelect id="roleSelect"
                                               CssClass="form-select"
                                               TValue="Guid[]"
                                               TItem="RoleModel"
                                               DataSource="_roles"
                                               @bind-Value="                                            _selectedRoles"
                                               AllowFiltering="true"
                                               Placeholder="Výběr rolí">
                                    <MultiSelectFieldSettings Value="@nameof(RoleModel.Id)" Text="@nameof(RoleModel.Name)"></MultiSelectFieldSettings>
                                </SfMultiSelect>
                            }
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <button type="submit" class="btn btn-primary">Uložit změny</button>
                    </div>
                </div>
            </EditForm>
        }
    </div>
</div>

@code {
    [Parameter]
    public Guid Id { get; set; }

    private UserModel? _user;
    private List<RoleModel>? _roles;
    private Guid[] _selectedRoles = Array.Empty<Guid>();
    
    protected override async Task OnInitializedAsync()
    {
        _user = await UserFacade.GetAsync(Id);
        if (_user is null)
            return; // TODO: Error handling
        
        _roles = await RoleFacade.GetAsync();
        _selectedRoles = _user.Roles.Select(x => x.Id).ToArray();
    }

    private async Task EditUserAsync()
    {
        if (_user is null)
            return;
        
        if (_roles is not null)
            _user.Roles = _roles.IntersectBy(_selectedRoles, x => x.Id).ToList();
        
        await UserFacade.UpdateAsync(_user);
        NavigationManager.NavigateTo("/Staff/User");
    }
}
